// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DateTime (optimize: %s) RequiredBoolean should return a function body 1`] = `
Array [
  Object {
    "NotRfc3339Fail": [Function],
    "NotStringFail": [Function],
    "RequiredFail": [Function],
    "WrongLengthFail": [Function],
    "dateTimePattern": /\\^\\(\\[0-9\\]\\{4\\}\\)-\\(0\\[1-9\\]\\|1\\[012\\]\\)-\\(0\\[1-9\\]\\|\\[12\\]\\[0-9\\]\\|3\\[01\\]\\)\\[Tt\\]\\(\\[01\\]\\[0-9\\]\\|2\\[0-3\\]\\):\\(\\[0-5\\]\\[0-9\\]\\):\\(\\[0-5\\]\\[0-9\\]\\|60\\)\\(\\\\\\.\\[0-9\\]\\+\\)\\?\\(\\(\\[Zz\\]\\)\\|\\(\\[\\+\\|-\\]\\(\\[01\\]\\[0-9\\]\\|2\\[0-3\\]\\):\\[0-5\\]\\[0-9\\]\\)\\)\\$/,
  },
  Array [],
  Array [
    "const value1 = value1",
    "if (value1 !== undefined) {",
    "  if (typeof value1 === 'string') {",
    "    if (value1.length >= 20 && value1.length <= 30) {",
    "      if (!dateTimePattern.test(value1)) {",
    "        errors.push(new NotRfc3339Fail(\`Must be formatted as an RFC 3339 timestamp\`, value1, context))",
    "      }",
    "    } else {",
    "      errors.push(new WrongLengthFail(\`Must contain between 20 and 30 characters\`, value1, context))",
    "    }",
    "  } else {",
    "    errors.push(new NotStringFail(\`Must be a string\`, value1, context))",
    "  }",
    "} else {",
    "  errors.push(new RequiredFail(\`Is required\`, value1, context))",
    "}",
  ],
]
`;
