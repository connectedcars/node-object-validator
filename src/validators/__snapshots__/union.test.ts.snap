// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Union RequiredUnion should return an function body 1`] = `
Array [
  Object {
    "NotFloatFail": [Function],
    "NotObjectFail": [Function],
    "NotStringFail": [Function],
    "OutOfRangeFail": [Function],
    "RequiredFail": [Function],
    "UnionFail": [Function],
    "WrongLengthFail": [Function],
  },
  Array [
    "const scheme2 = validator1.schema",
  ],
  Array [
    "const unionValue1 = value1",
    "const unionValue1orgErrors = errors",
    "let unionValue1Errors = []",
    "if (unionValue1 !== undefined) {",
    "  let errors = []",
    "  const value3 = unionValue1",
    "  if (value3 !== undefined) {",
    "    if (typeof value3 === 'string') {",
    "      if (value3.length > 9007199254740991) {",
    "        errors.push(new WrongLengthFail(\`Must contain between 0 and 9007199254740991 characters\`, value3, \`(0)\`))",
    "      }",
    "    } else {",
    "      errors.push(new NotStringFail(\`Must be a string\`, value3, \`(0)\`))",
    "    }",
    "  } else {",
    "    errors.push(new RequiredFail(\`Is required\`, value3, \`(0)\`))",
    "  }",
    "  if (errors.length > 0) {",
    "    unionValue1Errors.push(",
    "      new UnionFail(\`Union entry failed validation with \${errors.length} errors\`, errors, unionValue1, \`(0)\`)",
    "    )",
    "  } else {",
    "    unionValue1Errors = []",
    "  }",
    "  errors = []",
    "  if (unionValue1Errors.length > 0) {",
    "    const value4 = unionValue1",
    "    if (value4 !== undefined) {",
    "      if (typeof value4 === 'number' && !isNaN(value4 ) && isFinite(value4)) {",
    "        if (value4 < -9007199254740991 || value4 > 9007199254740991) {",
    "          errors.push(new OutOfRangeFail(\`Must be between -9007199254740991 and 9007199254740991\`, value4, \`(1)\`))",
    "        }",
    "      } else {",
    "        errors.push(new NotFloatFail(\`Must be a float\`, value4, \`(1)\`))",
    "      }",
    "    } else {",
    "      errors.push(new RequiredFail(\`Is required\`, value4, \`(1)\`))",
    "    }",
    "  }",
    "  if (errors.length > 0) {",
    "    unionValue1Errors.push(",
    "      new UnionFail(\`Union entry failed validation with \${errors.length} errors\`, errors, unionValue1, \`(1)\`)",
    "    )",
    "  } else {",
    "    unionValue1Errors = []",
    "  }",
    "  errors = []",
    "  unionValue1orgErrors.push(...unionValue1Errors)",
    "} else {",
    "  errors.push(new RequiredFail(\`Is required\`, unionValue1, context))",
    "}",
  ],
]
`;
